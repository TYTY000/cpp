/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sfinae.cc                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: TYTY000 <767280080@qq.com>                 +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/15 15:28:06 by TYTY000           #+#    #+#             */
/*   Updated: 2024/08/15 15:28:06 by TYTY000          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>

// 如果 C 是类或者类的引用类型且 F 是指向 C 的成员函数的指针，
// 那么这个重载会被添加到重载集
template <class C, class F>
auto test(C c, F f) -> decltype((void)(c.*f)(), void()) {
    std::cout << "(1) 调用了类/类引用重载\n";
}

// 如果 C 是类的指针类型且 F 是指向 C 的成员函数的指针，
// 那么这个重载会被添加到重载集
template <class C, class F>
auto test(C c, F f) -> decltype((void)((c->*f)()), void()) {
    std::cout << "(2) 调用了指针重载\n";
}

// 此重载始终在重载集中：
// 省略号形参对于重载决议具有最低等级
void test(...) { std::cout << "(3) 调用了保底重载\n"; }

int main() {
    struct X {
        void f() {}
    };
    X x;
    X& rx = x;
    test(x, &X::f);   // (1)
    test(rx, &X::f);  // (1), 创建了 x 的副本
    test(&x, &X::f);  // (2)
    test(42, 1337);   // (3)
}
